{"version":3,"file":"projects_connect_src_app_Pages_AuthPage_auth-page_module_ts.js","mappings":"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","sources":["./projects/connect/src/app/Pages/AuthPage/auth-page-routing.module.ts","./projects/connect/src/app/Pages/AuthPage/auth-page.module.ts","./projects/connect/src/app/Pages/AuthPage/create-new-password/create-new-password.component.ts","./projects/connect/src/app/Pages/AuthPage/create-new-password/create-new-password.component.html","./projects/connect/src/app/Pages/AuthPage/sign-in/sign-in.component.ts","./projects/connect/src/app/Pages/AuthPage/sign-in/sign-in.component.html","./projects/connect/src/app/Pages/AuthPage/sign-up/sign-up.component.ts","./projects/connect/src/app/Pages/AuthPage/sign-up/sign-up.component.html","./projects/connect/src/app/Services/AuthServices/CreateNewPassword/create-new-password.service.ts","./projects/connect/src/app/Services/AuthServices/ForgetPasswordService/forget-password.service.ts","./projects/connect/src/app/Services/AuthServices/RegisterService/register.service.ts","./projects/connect/src/app/Services/LocalStorageService/local-storage.service.ts","./shared/shared-guards/new-password-guard/create-new-password.guard.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateNewPasswordComponent } from './create-new-password/create-new-password.component';\nimport { SignInComponent } from './sign-in/sign-in.component';\nimport { SignUpComponent } from './sign-up/sign-up.component';\nimport {CreateNewPasswordGuard} from '../../../../../../shared/shared-guards/new-password-guard/create-new-password.guard';\n\nconst routes: Routes = [\n\t{ path: 'sign-in', component: SignInComponent },\n\t{ path: 'sign-up', component: SignUpComponent },\n  { path: 'create-new-password', component: CreateNewPasswordComponent, canActivate: [CreateNewPasswordGuard] }\n];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule]\n})\nexport class AuthPageRoutingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {AuthPageRoutingModule} from './auth-page-routing.module';\nimport {SignInComponent} from './sign-in/sign-in.component';\nimport {SignUpComponent} from './sign-up/sign-up.component';\nimport {AngularMaterialModule} from 'shared/shared-modules/angular-material.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {SharedComponentsModule} from '../../../../../../shared/shared-components/shared-components.module';\nimport { CreateNewPasswordComponent } from './create-new-password/create-new-password.component';\n\n\n@NgModule({\n  declarations: [\n    SignInComponent,\n    SignUpComponent,\n    CreateNewPasswordComponent\n  ],\n  imports: [\n    CommonModule,\n    AuthPageRoutingModule,\n    AngularMaterialModule,\n    ReactiveFormsModule,\n    SharedComponentsModule,\n  ]\n})\nexport class AuthPageModule {\n}\n","/**\n * Author: Mahmoud Hamza , Abd elaziz elsabagh\n * Date: 16/02/2023\n * Description: The Component For creating new password\n */\nimport { Component } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { environment } from 'projects/connect/src/environments/environment';\nimport { CStaticIds } from 'shared/shared-static-id/shared-static-id';\nimport { PasswordValidators } from 'shared/shared-validators/password-validator/password.validator';\nimport {CreateNewPasswordService} from '../../../Services/AuthServices/CreateNewPassword/create-new-password.service';\nimport {Router} from '@angular/router';\nimport {LoginService} from '../../../Services/AuthServices/LoginService/login.service';\nimport {ToastrService} from '../../../../../../../shared/shared-services/toastr.service';\nimport {MustMatch} from '../../../../../../../shared/shared-functions/MustMatch';\n\n@Component({\n  selector: 'app-create-new-password',\n  templateUrl: './create-new-password.component.html',\n  styleUrls: ['./create-new-password.component.css'],\n})\nexport class CreateNewPasswordComponent {\n  logo: string = environment.connectLogo;\n  htmlID = CStaticIds;\n\n  form!: FormGroup;\n\n  showPassword = false;\n  /**\n   * The Requirements For The Construction Of The Component\n   * @param formBuilder form builder\n   * @param loginService for using log out\n   * @param createPassword for create new password requests\n   * @param toasterService for notifications\n   */\n  constructor(private formBuilder: FormBuilder, private createPassword: CreateNewPasswordService, private loginService: LoginService, private toasterService: ToastrService) {\n    this.form = formBuilder.group({\n      newPassword: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(8),\n          PasswordValidators.hasDigit(),\n          PasswordValidators.hasUpper(),\n          PasswordValidators.hasLower(),\n          PasswordValidators.hasSpecialChar(),\n        ],\n      ],\n      confirmPassword: ['', Validators.required],\n    }, {\n      validator: MustMatch('newPassword', 'confirmPassword')\n    });\n  }\n  /**\n   * This function submit the new password\n   * @return void\n   */\n  onSubmit(): void{\n    this.createPassword.createNewPassword({newPassword: this.form.controls.newPassword.value}).subscribe(res => {\n      if (res.success) {\n        localStorage.removeItem('newPass');\n        this.loginService.logout();\n        this.toasterService.updateAlert('Changed Successfully', 'Password', 'start');\n      }\n      else {\n        this.toasterService.errorAlert('Error Happened', 'Create New Password');\n      }\n    }, error => {this.toasterService.errorAlert('Error Happened', 'Create New Password')});\n  }\n\n  toggleShowPassword(): void{\n    this.showPassword = !this.showPassword;\n\n  }\n}\n","<app-banner></app-banner>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <div\n    class=\"container d-flex justify-content-center align-items-center animate__animated animate__fadeIn\"\n  >\n    <!-- <div class=\" row justify-content-between align-items-center\"> -->\n      <div class=\"placard col-lg-4\">\n        <h1>Create New Password</h1>\n        <h3>Your Password has expired. Please create a new password.</h3>\n        <h3>\n          Your new password must be different from  previously used passwords.\n        </h3>\n      </div>\n\n\n      <mat-card\n        id=\"mat-card\"\n        class=\"col-lg-4 animate__animated animate__fadeIn\"\n      >\n        <mat-card-title>\n          <img\n             [src]=\"logo\"\n            [id]=\"htmlID.Image + 'logo'\"\n            alt=\"Connect Logo\"\n          />\n        </mat-card-title>\n        <mat-card-content class=\"w-100\">\n\n          <div class=\"new-password field\">\n            <mat-form-field class=\"w-100\" id=\"create-new-pass-field\">\n              <mat-label [id]=\"htmlID.Label + 'newPass'\"\n                >New Password</mat-label\n              >\n              <input\n                type=\"password\"\n                matInput\n                formControlName=\"newPassword\"\n                [id]=\"htmlID.Input + 'newPass'\"\n                placeholder=\"New Password\"\n                type=\"{{(showPassword === false)?'password':'text'}}\"\n              />\n              <mat-icon matSuffix style=\"cursor: pointer;\" (click)=\"toggleShowPassword()\">\n                {{!showPassword?'visibility':'visibility_off'}}</mat-icon>\n            </mat-form-field>\n\n            <mat-error\n              *ngIf=\"\n                (form.controls.newPassword.dirty &&\n                  form.controls.newPassword.hasError('minlength')) ||\n                (form.controls.newPassword.dirty &&\n                  form.controls.newPassword.hasError('required'))\n              \"\n            >\n              Password must be at least 8 characters long.\n            </mat-error>\n\n            <mat-error\n              *ngIf=\"\n                form.controls.newPassword.dirty &&\n                form.controls.newPassword.value &&\n                form.controls.newPassword.hasError('upper')\n              \"\n            >\n              The password must contain at least one upperCase letter.\n            </mat-error>\n\n            <mat-error\n              *ngIf=\"\n                form.controls.newPassword.dirty &&\n                form.controls.newPassword.value &&\n                form.controls.newPassword.hasError('lower')\n              \"\n            >\n              The password must contain at least one lowerCase letter.\n            </mat-error>\n\n            <mat-error\n              *ngIf=\"\n                form.controls.newPassword.dirty &&\n                form.controls.newPassword.value &&\n                form.controls.newPassword.hasError('digit')\n              \"\n            >\n              The password must contain at least one digit.\n            </mat-error>\n\n            <mat-error\n              *ngIf=\"\n                form.controls.newPassword.dirty &&\n                form.controls.newPassword.value &&\n                form.controls.newPassword.hasError('special')\n              \"\n            >\n              The password must contain at least one special character (ie,\n              @,#,!,-).\n            </mat-error>\n          </div>\n\n          <div class=\"confirm-password field\">\n            <mat-form-field class=\"w-100\">\n              <mat-label [id]=\"htmlID.Label + 'confirm'\"\n                >Confirm Password</mat-label\n              >\n              <input\n                type=\"password\"\n                matInput\n                formControlName=\"confirmPassword\"\n                [id]=\"htmlID.Input + 'confirm'\"\n                placeholder=\"New Password\"\n                type=\"{{(showPassword === false)?'password':'text'}}\"\n              />\n              <mat-icon matSuffix style=\"cursor: pointer;\" (click)=\"toggleShowPassword()\">\n                {{!showPassword?'visibility':'visibility_off'}}</mat-icon>\n            </mat-form-field>\n            <mat-error *ngIf=\"form.controls.confirmPassword.value && form.controls.confirmPassword.hasError('wrongPassword')\">\n              Confirm Password <strong>is not equal</strong> New Password\n            </mat-error>\n          </div>\n        </mat-card-content>\n        <mat-card-footer>\n          <mat-card-actions class=\"w-100 d-flex justify-content-center\">\n            <button\n              class=\"auth-btn\"\n              type=\"submit\"\n              [id]=\"htmlID.Button + 'Reset-pass'\"\n              mat-button\n              [disabled]=\"!form.valid\"\n            >\n              Reset Password\n            </button>\n          </mat-card-actions>\n        </mat-card-footer>\n      </mat-card>\n    </div>\n</form>\n","/**\n * Copyright (c) 3ddx\n *\n * @summary sign in component\n * @author Amr Mossad, Basel El-sawy, Mahmoud Hamza, Rana AbdelAziz\n *\n * Created at : 2021-10-25\n */\nimport {Component, OnInit} from '@angular/core';\nimport {ISharedLogin} from '../../../../../../../shared/shared-interfaces/login';\nimport {Router} from '@angular/router';\nimport {environment} from '../../../../environments/environment';\nimport {LoginService} from '../../../Services/AuthServices/LoginService/login.service';\nimport {ERequestTypes} from '../../../Models/Enums/RequestTypes/RequestTypes';\nimport {ILogin} from '../../../Models/Interfaces/Auth/Login';\nimport {ResponseCodeEnum} from '../../../../../../../shared/shared-enums/ResponseCodeEnum';\nimport {IUserData} from '../../../Models/Interfaces/Auth/UserData';\nimport {ToastrService} from '../../../../../../../shared/shared-services/toastr.service';\nimport {LocalStorageService} from '../../../Services/LocalStorageService/local-storage.service';\nimport {IApiData} from '../../../Models/Interfaces/APIs/apiData.model';\nimport {IForgetPassword} from '../../../Models/Interfaces/Auth/ForgetPassword';\nimport {ForgetPasswordService} from '../../../Services/AuthServices/ForgetPasswordService/forget-password.service';\nimport {CStaticIds} from '../../../../../../../shared/shared-static-id/shared-static-id';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.css']\n})\n\nexport class SignInComponent implements OnInit {\n  logo: string = environment.connectLogo;\n  userData: IUserData = {} as IUserData;\n  loginObj = {requestType: ERequestTypes.ADD, services: []} as IApiData<ILogin>;\n  forgetPasswordObj = {requestType: ERequestTypes.UPDATE, services: []} as IApiData<IForgetPassword>;\n  htmlID = CStaticIds;\n  /**\n   * The Requirements For The Construction Of The Component\n   * @param router For The routing\n   * @param loginService for logIn method\n   * @param forgetPasswordService for forgetPassword method\n   * @param toastService for requests notifications\n   * @param localStorageService for setting items in local storage ;\n   */\n  constructor(\n    private router: Router,\n    private loginService: LoginService,\n    private forgetPasswordService: ForgetPasswordService,\n    private toastService: ToastrService,\n    private localStorageService: LocalStorageService\n  ) {\n  }\n  /**\n   * onInit navigate to orders page if client used remember me in log in\n   * @return void\n   */\n  ngOnInit(): void {\n  }\n  /**\n   * navigate to register page\n   * @return void\n   */\n  register(): void {\n    this.router.navigate(['auth', 'sign-up']);\n  }\n  /**\n   * onSubmit sign in and navigate to orders page\n   * @param event logIn form object\n   * @return void\n   */\n  onSubmit(event: ISharedLogin): void {\n    this.loginObj.services[0] = {\n      userName: event.email,\n      password: event.password,\n      serviceName: '',\n      columns: [],\n      ConditionsAnded: false\n    };\n    this.loginService.login(this.loginObj).subscribe(res => {\n      if (res.responsCode === ResponseCodeEnum.OK) {\n        const responseOBJ = JSON.parse(res.responsString);\n        if (!responseOBJ.needChange) {\n          if (event.rememberMe) {\n            localStorage.setItem('rememberUser', 'true');\n          } else {\n            localStorage.setItem('rememberUser', 'false');\n          }\n          this.userData = responseOBJ;\n          this.localStorageService.setLocalStorageGDBR(this.userData);\n          this.router.navigate(['connect-modules', 'View-Orders-page']);\n          this.toastService.addAlert(`Welcome ${this.userData.fName} ${this.userData.lName}`, 'In New Connect', 'start');\n        }\n        else {\n          localStorage.setItem('newPass', 'true');\n          this.toastService.errorAlert(`expired password, please create new password`, 'Create new password');\n          this.router.navigate(['auth', 'create-new-password']);\n        }\n      }\n    });\n  }\n  /**\n   * onForgetPassword send data to client's mail\n   * @param event forgetPassword form Object\n   * @return void\n   */\n  onForgetPassword(event: { email: string }): void {\n    this.forgetPasswordObj.services[0] = {\n      userName: event.email,\n      password: '',\n      serviceName: '',\n      columns: [],\n      ConditionsAnded: false\n    };\n    this.forgetPasswordService.forgetPassword(this.forgetPasswordObj).subscribe(res => {\n      if (res.responsCode === ResponseCodeEnum.OK) {\n        this.toastService.addAlert('Please Check Your Email', 'Forget Password', 'start');\n      }\n    });\n  }\n}\n","<app-banner></app-banner>\n<div class=\"container animate__animated animate__fadeIn\">\n  <mat-card class=\"animate__animated animate__fadeIn\">\n    <mat-card-title>\n      <img [src]=\"logo\" [id]=\"htmlID.Image + 'logo'\" alt=\"Connect Logo\">\n    </mat-card-title>\n    <mat-card-content>\n      <app-login-form (signInOBJ)=\"onSubmit($event)\" [logo]=\"logo\"\n                      (forgetPasswordOBJ)=\"onForgetPassword($event)\"></app-login-form>\n      <button class=\"auth-btn\" [id]=\"htmlID.Button + 'register'\"  (click)='register()' mat-button>Register</button>\n    </mat-card-content>\n  </mat-card>\n</div>\n","/**\n * Copyright (c) 3ddx\n *\n * @summary sign up component\n * @author Amr Mossad, Basel El-sawy, Mahmoud Hamza, Rana AbdelAziz\n *\n * Created at : 2021-10-25\n */\nimport {Component, OnInit} from '@angular/core';\nimport {ISharedRegister} from '../../../../../../../shared/shared-interfaces/register';\nimport {Router} from '@angular/router';\nimport {RegisterService} from '../../../Services/AuthServices/RegisterService/register.service';\nimport {IRegister, UserCNAdresses, UserCNCreditCards, UserCNEmails, UserCNTelecoms} from '../../../Models/Interfaces/Auth/Register';\nimport {ERequestTypes} from '../../../Models/Enums/RequestTypes/RequestTypes';\nimport {ResponseCodeEnum} from 'shared/shared-enums/ResponseCodeEnum';\nimport {LoginService} from '../../../Services/AuthServices/LoginService/login.service';\nimport {LocalStorageService} from '../../../Services/LocalStorageService/local-storage.service';\nimport {IUserData} from '../../../Models/Interfaces/Auth/UserData';\nimport {ILogin} from '../../../Models/Interfaces/Auth/Login';\nimport {ToastrService} from 'shared/shared-services/toastr.service';\nimport {ServiceNameEnum} from 'shared/shared-enums/ServiceNameEnum';\nimport {IApiData} from '../../../Models/Interfaces/APIs/apiData.model';\nimport {environment} from '../../../../environments/environment';\nimport {CStaticIds} from '../../../../../../../shared/shared-static-id/shared-static-id';\nimport { IForgetPassword } from '../../../Models/Interfaces/Auth/ForgetPassword';\nimport { ForgetPasswordService } from '../../../Services/AuthServices/ForgetPasswordService/forget-password.service';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.css']\n})\nexport class SignUpComponent implements OnInit {\n  logo = environment.connectLogo;\n  signInOBJ: IRegister = {\n    userCNAdresses: [{}] as UserCNAdresses[],\n    userCNCreditCards: [{}] as UserCNCreditCards[],\n    userCNEmails: [{}] as UserCNEmails[],\n    userCNTelecoms: [{}] as UserCNTelecoms[]\n  } as IRegister;\n  userData: IUserData = {} as IUserData;\n  loginObj = {requestType: ERequestTypes.ADD, services: []} as IApiData<ILogin>;\n  htmlID = CStaticIds;\n  forgetPasswordObj = {requestType: ERequestTypes.UPDATE, services: []} as IApiData<IForgetPassword>;\n  isAlreadyExist: boolean = false;\n  /**\n   * The Requirements For The Construction Of The Component\n   * @param router For The routing\n   * @param loginService for logIn method\n   * @param registerService for registration\n   * @param toastService for requests notifications\n   * @param localStorageService for setting items in local storage ;\n   */\n  constructor(\n    private router: Router,\n    private registerService: RegisterService,\n    private loginService: LoginService,\n    private localStorageService: LocalStorageService,\n    private forgetPasswordService: ForgetPasswordService,\n    private toastService: ToastrService\n  ) {\n  }\n\n  ngOnInit(): void {\n\n  }\n  /**\n   * onSubmit  set user's signInOBJ ,register and sign in\n   * @param event register object\n   * @return void\n   */\n  onSubmit(event: ISharedRegister): void {\n    this.signInOBJ.userCNEnumId = event.userType;\n    this.signInOBJ.pwd = event.password;\n    this.signInOBJ.fName = event.fName;\n    this.signInOBJ.lName = event.lName;\n    this.signInOBJ.stateEnumId = +event.state;\n    this.signInOBJ.rcivMail = event.rcivMail;\n    this.signInOBJ.city = event.city;\n    this.signInOBJ.zipCode = +event.zipCode;\n    this.signInOBJ.leadRefRepName = event.pleaseSpecifyName;\n    this.signInOBJ.usersCNLeadSourceEnumId = +event.leadSource;\n    this.signInOBJ.leadSourceDesc = event.pleaseSpecify;\n    this.signInOBJ.userCNAdresses[0].addressLine1 = event.address1;\n    this.signInOBJ.userCNAdresses[0].addressLine2 = event.address2;\n    this.signInOBJ.userCNAdresses[0].usersCNAdressesEnumId = +event.addressType;\n    this.signInOBJ.userCNCreditCards[0].creditCard = event.creditCardNum ? event.creditCardNum : '';\n    this.signInOBJ.userCNCreditCards[0].creditCardEnumId = event.paymentType;\n    let expiration = new Date(event.year, event.month, 2);\n    this.signInOBJ.userCNCreditCards[0].creditCardTimeExp = expiration.getTime() ? expiration.getTime() / 1000 : 0;\n    this.signInOBJ.userCNEmails[0].email = event.email;\n    this.signInOBJ.userCNEmails[0].emailEnumId = event.userType;\n    this.signInOBJ.userCNTelecoms = event.phones;\n    this.signInOBJ.isPortableVersion = false;\n    this.signInOBJ.countryEnumId = event.country;\n    this.signInOBJ.serviceName = ServiceNameEnum.VUsersCN;\n    this.signInOBJ.columns = [];\n    this.signInOBJ.ConditionsAnded = false;\n    this.signInOBJ.agreeTerms = event.termsOfService;\n    this.signInOBJ.agreePrivacy = event.privacyPolicy;\n    this.registerService.register({services: [this.signInOBJ], requestType: ERequestTypes.ADD}).subscribe(res => {\n      if (res.responsCode === ResponseCodeEnum.OK) {\n        this.signIn();\n      }\n      if(res.responsCode === ResponseCodeEnum.Registeration_Failed_Email_Exist){\n        this.isAlreadyExist = true;\n      }\n    });\n  }\n  /**\n   * onSubmit sign in and navigate to orders page\n   * @return void\n   */\n  signIn(): void {\n    this.loginObj.services[0] = {\n      userName: this.signInOBJ.userCNEmails[0].email,\n      password: this.signInOBJ.pwd,\n      serviceName: '',\n      columns: [],\n      ConditionsAnded: false\n    };\n    this.loginService.login(this.loginObj).subscribe(response => {\n      if (response.responsCode === ResponseCodeEnum.OK) {\n        this.userData = JSON.parse(response.responsString);\n        this.localStorageService.setLocalStorageGDBR(this.userData);\n        this.toastService.tutorial = true;\n        this.router.navigate(['connect-modules', 'View-Orders-page']);\n        this.toastService.addAlert(`Welcome ${this.userData.fName} ${this.userData.lName}`, 'In New Connect', 'start');\n      }\n    });\n  }\n\n    /**\n   * onForgetPassword send data to client's mail\n   * @param event forgetPassword form Object\n   * @return void\n   */\n     onForgetPassword(event: { email: string }): void {\n      this.forgetPasswordObj.services[0] = {\n        userName: event.email,\n        password: '',\n        serviceName: '',\n        columns: [],\n        ConditionsAnded: false\n      };\n      this.forgetPasswordService.forgetPassword(this.forgetPasswordObj).subscribe(res => {\n        if (res.responsCode === ResponseCodeEnum.OK) {\n          this.toastService.addAlert('Please Check Your Email', 'Forget Password', 'start');\n        }\n      });\n    }\n\n}\n","<app-banner></app-banner>\n<div class=\"container pb-2 mt-4 mb-5\">\n    <mat-card style=\"margin-bottom: 150px !important;\" class=\"example-card\">\n        <mat-card-title>\n            <img [src]=\"logo\" [id]=\"htmlID.Image + 'logo'\" alt=\"Connect Logo\">\n        </mat-card-title>\n        <mat-card-content>\n            <app-register-form [isAlreadyExist]=\"isAlreadyExist\" [logo]=\"logo\" (registerInOBJ)=\"onSubmit($event)\" (forgetPasswordOBJ)=\"onForgetPassword($event)\"></app-register-form>\n        </mat-card-content>\n    </mat-card>\n</div>\n","/**\n * Author: Mahmoud Hamza\n * Date: 26/02/2023\n * Description: The service For creating new password\n */\n\nimport { Injectable } from '@angular/core';\nimport {DataService} from '../../DataService/data.service';\nimport {IApiData} from '../../../Models/Interfaces/APIs/apiData.model';\nimport {ILogin} from '../../../Models/Interfaces/Auth/Login';\nimport {Observable} from 'rxjs';\nimport {IMainResponse} from '../../../Models/Interfaces/Main/MainResponse';\nimport {APIName} from '../../../../../../../shared/API/APIName';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateNewPasswordService {\n  /**\n   * The Requirements For The Construction Of The service\n   * @param dataService for http requests\n   */\n  constructor(private dataService: DataService) {\n  }\n  /**\n   * create new password\n   * @param newPass new password object\n   * @return Observable<any>\n   */\n  createNewPassword(newPass: {newPassword: string}): Observable<any> {\n    return this.dataService.post(APIName.createNewPassword, newPass);\n  }\n}\n","/**\n * Copyright (c) 3ddx\n *\n * @summary forget password service\n * @author Amr Mossad, Basel El-sawy, Mahmoud Hamza, Rana AbdelAziz\n *\n * Created at : 2021-12-21\n */\nimport {Injectable} from '@angular/core';\nimport {DataService} from '../../DataService/data.service';\nimport {Observable} from 'rxjs';\nimport {IMainResponse} from '../../../Models/Interfaces/Main/MainResponse';\nimport {IApiData} from '../../../Models/Interfaces/APIs/apiData.model';\nimport {IForgetPassword} from '../../../Models/Interfaces/Auth/ForgetPassword';\nimport {APIName} from '../../../../../../../shared/API/APIName';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForgetPasswordService {\n  /**\n   * The Requirements For The Construction Of The service\n   * @param dataService for managing Http methods\n   */\n  constructor(private dataService: DataService) {\n  }\n  /**\n   * forget password\n   * @param forgetObj forget password object\n   * @return Observable<IMainResponse>\n   */\n  forgetPassword(forgetObj: IApiData<IForgetPassword>): Observable<IMainResponse> {\n    return this.dataService.post(APIName.forgetPassword, forgetObj);\n  }\n}\n","/**\n * Copyright (c) 3ddx\n *\n * @summary register service\n * @author Amr Mossad, Basel El-sawy, Mahmoud Hamza, Rana AbdelAziz\n *\n * Created at : 2021-12-8\n */\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IRegister } from '../../../Models/Interfaces/Auth/Register';\nimport { IMainResponse } from '../../../Models/Interfaces/Main/MainResponse';\nimport { DataService } from './../../DataService/data.service';\nimport { APIName } from 'shared/API/APIName';\nimport { IApiData } from '../../../Models/Interfaces/APIs/apiData.model';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class RegisterService {\n  /**\n   * The Requirements For The Construction Of The service\n   * @param dataService for managing Http methods\n   */\n\tconstructor(private dataService: DataService) { }\n  /**\n   * register\n   * @param data register object\n   * @return Observable<IMainResponse>\n   */\n\tregister(data: IApiData<IRegister>): Observable<IMainResponse> {\n\t\treturn this.dataService.post(APIName.register, data);\n\t};\n}\n","/**\n * Copyright (c) 3ddx\n *\n * @summary set items in local storage service\n * @author Amr Mossad, Basel El-sawy, Mahmoud Hamza, Rana AbdelAziz\n *\n * Created at : 2021-12-7\n */\nimport {Injectable} from '@angular/core';\nimport {IUserData} from '../../Models/Interfaces/Auth/UserData';\nimport {CookieService} from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n\n  constructor() {\n  }\n  /**\n   * set user data in local storage\n   * @param userData user data object\n   * @return void\n   */\n  setLocalStorage(userData: IUserData): void {\n    localStorage.setItem('fName', userData.fName);\n    localStorage.setItem('lName', userData.lName);\n    localStorage.setItem('token', userData.token);\n    localStorage.setItem('isPortableVersion', JSON.stringify(userData.isPortableVersion));\n    localStorage.setItem('type', JSON.stringify(userData.type));\n    localStorage.setItem('userCNId', JSON.stringify(userData.userCNId));\n    localStorage.setItem('convOneShotPrice', JSON.stringify(userData.userPrices.convOneShotPrice));\n    localStorage.setItem('laserScanPrice', JSON.stringify(userData.userPrices.laserScanPrice));\n    localStorage.setItem('reportRecommendedPrice', JSON.stringify(userData.userPrices.reportRecommendedPrice));\n    localStorage.setItem('reportRushPrice', JSON.stringify(userData.userPrices.reportRushPrice));\n    localStorage.setItem('sgRushPrice', JSON.stringify(userData.userPrices.sgRushPrice));\n    localStorage.setItem('tpReviewPrice', JSON.stringify(userData.userPrices.tpReviewPrice));\n    localStorage.setItem('userCurrencySymbol', userData.userPrices.userCurrencySymbol);\n  }\n  /**\n   * set user data in GDBR local storage\n   * @param userData user data object\n   * @return void\n   */\n  setLocalStorageGDBR(userData: IUserData): void {\n    localStorage.setItem('fName', userData.fName);\n    localStorage.setItem('lName', userData.lName);\n    localStorage.setItem('isPortableVersion', JSON.stringify(userData.isPortableVersion));\n    localStorage.setItem('token', '');\n    localStorage.setItem('type', JSON.stringify(userData.type));\n    localStorage.setItem('userCNId', JSON.stringify(userData.userCNId));\n    this.saveOldConnectCookies(userData);\n  }\n  /**\n   * set user data in connect cookies\n   * @param userData user data object\n   * @return void\n   */\n  saveOldConnectCookies(userData: IUserData): void {\n    const expireCookie = this.getCookieExpiryDate();\n    document.cookie = `userCNId=${userData.userCNId};expires=${expireCookie};path=/`;\n    document.cookie = `userCNName=${userData.fName + userData.lName};expires=${expireCookie};path=/`;\n    // document.cookie = `userCNToken=${loginResp.userData.token};expires=${expireCookie};path=/`;\n    // this.cookieService.set('userCNId', String(userData.userCNId), expireCookie, '/');\n    // this.cookieService.set('userCNName', userData.fName + userData.lName, expireCookie, '/');\n  }\n  /**\n   * get cookies expiry date\n   * @return any\n   */\n  getCookieExpiryDate(): any {\n    const now = new Date();\n    const time = now.getTime();\n    const expireTime = time + 7 * 24 * 60 * 60 * 1000;\n    now.setTime(expireTime);\n    return now.toUTCString();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateNewPasswordGuard implements CanActivate {\n  constructor(private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const auth = localStorage.getItem('newPass');\n    if (auth) {\n      return true;\n    } else {\n      this.router.navigate(['auth', 'sign-in']);\n      return false\n        ;\n    }\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}